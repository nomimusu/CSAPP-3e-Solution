#include <stdio.h>

//通过右移16位，将x的前16位和后16位进行异或运算，例如x ^= x >> 16;
//是将下标为31-16的二进制位分别与下标为15-0的二进制位进行异或运算
//此时得到的16个二进制位中，“1”代表两个二进制位中，有一个1和一个0；结果“0”代表两个二进制位中有两个1或者两个0；
//再通过右移8位，将上一步得到的结果的前8位和后8位进行异或运算，例如x ^= x >> 8;
//是将下标为16-8的二进制位分别与下标为7-0的二进制位进行异或运算
//此时得到的8个二进制位中，“1”代表四个二进制位中，有三个1和1个0或者一个1三个0；“0”代表四个二进制位中有两个1和两个0 或 四个1 或 四个0
//依次类推，当计算 x ^= x >> 1时，此时的结果只有1个二进制位
//结果“1”，代表三十二个二进制位中，有一个1和三十一个0 或 三个1和二十九个0 或 五个1和二十七个0 ...... 或 三十一个1和一个0；
//结果“0”，代表三十二个二进制位中，有零个1和三十二个0 或 两个1和二十九个0 或 四个1和二十八个0 ...... 或 三十二个1和零个0；
//x &= 1; 是将前面不相干的三十一个二进制位置零，从而得到最终的结果

int odd_ones(unsigned x)
{
	x ^= x >> 16;
	x ^= x >> 8;
	x ^= x >> 4;
	x ^= x >> 2;
	x ^= x >> 1;
	x &= 1;

	return x;
}

int main()
{
	printf("%d\n", odd_ones(0x01010101));
	printf("%d\n", odd_ones(0x01010111));

	return 0;
}
