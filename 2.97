// 理解题意：对于int i，计算(float)i的位级表示
// int i = 1, 二进制位表示为0 00000000 00000000000000000000001
// float i = 1.0, 二进制位表示为0 01111111 00000000000000000000000
// 通过函数float_i2f()将二进制位0 00000000 00000000000000000000001转换成0 01111111 00000000000000000000000

#include <stdio.h>
#include <limits.h>

typedef unsigned float_bits;

//设置一个计算int i有效二进制位的长度的函数
int bits_length(int i)
{
	//如果i为负数，那么有效二进制位的长度为32位
	if ((i & INT_MIN) != 0)
	{
		return 32;
	}

	int length = 0;
	
	//i为正数
	unsigned u = (unsigned)i;
	// 1 << length 表示的是二进制位的权重逐渐递增，0x1, 0x10, 0x100, 0x1000,......
	while (u >= (1 << length))
	{
		length++;
	}

	return length;
}

//*generate mask
//* 00000...(32 - l) 11111....(l)
//*
//* e.g.
//* 3 = > 0x00000007
//* 16 = > 0x0000FFFF

unsigned bits_mask(int l)
{
	return (unsigned)-1 >> (32 - l);
}

float_bits float_i2f(int i)
{
	// exp_sig is except sig
	unsigned sig, exp, frac, rest, exp_sig, round_part;
	unsigned bits, fbits;
	unsigned bias = 0x7f;

	if (i == 0)
	{
		sig = 0;
		exp = 0;
		frac = 0;
		return sig << 31 | exp << 23 | frac;
	}

	if (i == INT_MIN)
	{
		sig = 1;
		exp = bias + 32;
		frac = 0;
		return sig << 31 | exp << 23 | frac;
	}

	//由题意得，i = (-1)^s * 2^E * (1+f)
	//为了计算方便，当i<0时，我们可以将通过" i = -i ", 将i转换为正数，然后求得该正数所对应的exp，frac后，再将sig设为1即可
	sig = 0;

	if (i < 0)
	{
		sig = 1;
		i = -i;
	}

	//由题意得，i = 2^E * (1+f) = 2^E + 2^E * f
	//通过函数bits_length()和函数bits_mask()，可将2^E的值与i的最高有效位的值对应，2^E * f的值与i的除最高有效位之外的其他二进制位的值对应
	// bits表示i的有效二进制位的长度
	bits = bits_length(i);
	//fbits表示i的最高有效二进制位所占权重的指数, e.g. i的二进制位为0b1111, bits为4，最高有效二进制位所占权重为2^3, fbits = 3
	//fbits同时还代表着i的除最高有效位之外的其他二进制位的数量
	fbits = bits - 1;
	//fbits相当于阶码E，同时也表示i的最高有效二进制位所占权重的指数，所以实现了将2^E的值与i的最高有效位的值对应
	exp = bias + fbits;

	//32位系统中，单精度浮点数的小数字段frac有23位小数
	//由上可知，2^E * f的值需要与i的除最高有效位之外的其他二进制位的值对应
	//所以当fbits <= 23 时，不涉及舍入问题

	// rest表示i的除最高有效二进制位之外的二进制位,数量为fbits
	// i的除最高有效二进制位之外的二进制位的权重，在frac中，需要通过*2^E来得到恢复
	rest = i & bits_mask(fbits);
	
	if (fbits <= 23)
	{
		//i的除最高有效二进制位之外的二进制位的权重，在frac中，需要通过*2^E来得到恢复
		// e.g.
		// i的二进制位为0b1111,除最高有效位之外的另外三位的权重，从左到右依次为2^2, 2^1,2^0
		// 当这三位放置到小数域frac时，权重从左到到右依次为2^-1, 2^-2, 2^-3
		// 通过让小数域frac的三位乘以2^3,实现与这三位在int i的大小的相等
		// 所以2^E * f的值与i的除最高有效位之外的其他二进制位的值相等
		frac = rest << (23-fbits);
		return sig << 31 | exp << 23 | frac;
	}
	//当fbits > 23, 意味着i除了最高有效二进制位之外，至少还有24个二进制位，超出了frac小数域的23位，因此会发生舍入
	else
	{
		//offset表示i中最低的offset位二进制位，这些二进制位超出了frac小数域的23位
		int offset = fbits - 23;
		// round_mid表示i中最低的offset位二进制位中的最高有效位的权重
		int round_mid = 1 << (offset - 1);
		// round_part表示i中最低的offset位的二进制位
		round_part = rest & bits_mask(offset);
		// frac小数域只有23位，当fbits > 23时，rest的二进制位至少有24位，所以需要右移，去掉末尾的offset位
		frac = rest >> offset;
		exp_sig = exp << 23 | frac;

		//由于省略了i中最低的offset位二进制位，所以需要舍入
		if (round_part < round_mid)
		{
			//说明round_part表示i中最低的offset位的二进制位的最高位上的值为0，不需要向前+1
		}
		else if (round_part > round_mid)
		{
			//说明round_part表示i中最低的offset位的二进制位的最高位上的值为1，且其他二进制位至少有一个1，需要向前+1；
			exp_sig += 1;
		}
		else
		{
			//说明round_part表示i中最低的offset位的二进制位的最高位上的值为1,且其他二进制位都为0
			//根据向偶舍入的原则，如果frac小数域最低的1位上为1，则进1，如果为0，则不进1
			if ((frac & 0x1) == 0x1)
			{
				exp_sig += 1;
			}
		}
	}

	return sig << 31 | exp_sig;
}

