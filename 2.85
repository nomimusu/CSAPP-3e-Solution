#include <stdio.h>

// A 
// 7.0 = (-1)^0 * 1.75 * 2^2
// => f = 0.75, 二进制表示为0b0.1100...，一共有n位
// => e = E + bias = 2 + 2^(k-1)-1 = 2^(k-1)+1
// => e 二进制表示为0b10...1,一共有k位
//综上，7.0的二进制位表示 0 10....1 1100....

// B 
// V = (-1)^s * 2^E * M
// To get the biggest odd number
// => s = 0, Mmax = 1 + fmax = 2 - 2^(-n)
// V = 2^E * Mmax = 2^E * (2 - 2^(-n)) = 2^(E+1) - 2^(E-n)
// the result of 2^(E+1) is even number, in order to get the biggest odd number, 2^(E-n) must be smallesr odd number, so E equals n;
// if E is bigger than n, 2^(E-n) is even number;if E is smaller than n, 2^(E-n) is fractional number bigger than 0, smaller than 1;
// so the biggest odd number is 2^(n+1) - 1
// bits [0 bias+n 111...1]
// 上述解法，是先假设M取最大值，然后根据推导出来的公式“2^(E+1) - 2^(E-n)”和“能够被准确描述的最大奇整数”，知道当“E = n”时，才可以得到最大奇整数

// 假设E取最大值，M取最大值，最终还是会得到，当且仅当“E = n”时，才能够得到最大奇整数
// V = (-1)^s * 2^E * M
// to get the biggest odd number
// => V = 2^Emax * Mmax = 2^(emax - (2^(k-1)-1)) * (2 - 2^(-n)) = 2^(2^k-2-(2^(k-1)-1))*(2-2^(-n)) = 2^(2^(k-1)-1) * (2 - 2^(-n)) = 2^(2^(k-1)) - 2^(2^(k-1)-1-n)
// => V = 2^Emax * Mmax = 2^(2^(k-1)) - 2^(2^(k-1)-1-n), the result of 2^(2^(k-1)) is even number
// => to get the biggest odd number, the 2^(2^(k-1)-1-n) is the smallest odd number
// => 2^(k-1) - 1 - n = 0
// => 2^(k-1)-1 = n
// => 此次推论中，E取Emax，所以只有当 “E = n”时，才能够得到最大奇整数

// C the reciprocal of least standard number (signed number is 0)
// => f = Ob0.000...., M = Ob1.000...., E = 1 - bias
// => V = 2^(1-bias)
// reciprocal 
// => V = 2^(bias - 1)
// E = bias - 1, e = E + bias = 2*bias - 1 = 2^k - 3 = 2^k - 1 - 2
// => e的二进制表示为[111...01],共有k位
// => the reciprocal of least standard number is [0 11...01 000...]
